(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{391:function(t,v,_){"use strict";_.r(v);var a=_(12),r=Object(a.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"性能测试"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#性能测试"}},[t._v("#")]),t._v(" 性能测试")]),t._v(" "),v("h2",{attrs:{id:"性能测试的目的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#性能测试的目的"}},[t._v("#")]),t._v(" 性能测试的目的")]),t._v(" "),v("p",[t._v("发现性能瓶颈")]),t._v(" "),v("h2",{attrs:{id:"性能测试的分类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#性能测试的分类"}},[t._v("#")]),t._v(" 性能测试的分类")]),t._v(" "),v("p",[t._v("性能测试是一个非常广泛的概念，包括的很多方面的测试，也可称之为非功能测试。")]),t._v(" "),v("p",[t._v("自动化测试属于功能测试的范围，由于其测试方法要求测试人员拥有一定的代码能力，所以被单独分成一个测试模块。")]),t._v(" "),v("h3",{attrs:{id:"具体分类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#具体分类"}},[t._v("#")]),t._v(" 具体分类")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("负载测试:通过逐步加压的方法，达到既定的性能阀值的目标，阀值的设定应是小于等于某个值，如cpu使用率小于等于80%。")])]),t._v(" "),v("li",[v("p",[t._v("压力测试:通过逐步加压的方法，使得系统的某些资源达到饱和，甚至失效的状态，简单粗暴的解释就是什么条件能把系统压崩溃。")])]),t._v(" "),v("li",[v("p",[t._v("并发测试:在同一时间内，多个虚拟用户同时访问同一模块，同一功能，通常的测试方法是设置集合点。")])]),t._v(" "),v("li",[v("p",[t._v("容量测试:通常是指数据库层面的，目标是获取数据库的最佳容量的能力。又称之为容量预估。具体测试方法为在一定的并发用户，不同的基础数据量下，观察数据库的处理能力，即获取数据库的各项性能指标。")])]),t._v(" "),v("li",[v("p",[t._v("可靠性测试:又称之为稳定性测试或疲劳测试。是指系统在高压情况下，长时间的运行系统是否稳定。如cpu使用率在80%以上，7*24小时运行，系统是否稳定。")])]),t._v(" "),v("li",[v("p",[t._v("异常测试:又称之为失败测试。是指系统架构方面的测试。如在负载均衡架构中，要测试宕机，节点挂掉等情况系统的反应。")])])]),t._v(" "),v("h2",{attrs:{id:"性能测试的工作流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#性能测试的工作流程"}},[t._v("#")]),t._v(" 性能测试的工作流程")]),t._v(" "),v("p",[v("img",{attrs:{src:"/optimization/20191023161351462.png",alt:""}})]),t._v(" "),v("ul",[v("li",[t._v("需求分析:主要属性项目主要做的什么，哪些是重点，哪些是主要业务流程")]),t._v(" "),v("li",[t._v("性能指标(阶段性指标亦需考虑):关于吞吐量，tps，定义并发数等(满足业务需求)")]),t._v(" "),v("li",[t._v("脚本开发:纯代码，工具辅助")]),t._v(" "),v("li",[t._v("场景设置:调试脚本，设置场景(与需求分析有关联，需要符合用户在系统上的使用流程，经常做的操作为性能测试重点)")]),t._v(" "),v("li",[t._v("监控部署:对服务器，本地单独进行监控部署(因为工具收集的结果不全)")]),t._v(" "),v("li",[t._v("测试执行:基础测试(先少量用户并发先跑)能发现多并发下应用程序对多线程逻辑问题，多并发测试(大批用户并发跑)")]),t._v(" "),v("li",[t._v("性能分析:监控足够完善，分析才能全面，有理有据")]),t._v(" "),v("li",[t._v("性能调优")]),t._v(" "),v("li",[t._v("测试报告:满足前面所有指标才能写")])]),t._v(" "),v("h2",{attrs:{id:"常见系统应用分层架构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常见系统应用分层架构"}},[t._v("#")]),t._v(" 常见系统应用分层架构")]),t._v(" "),v("p",[v("img",{attrs:{src:"/optimization/20191023170453194.png",alt:""}})]),t._v(" "),v("ul",[v("li",[t._v("显示层:web,android,ios,H5")]),t._v(" "),v("li",[t._v("逻辑控制层:Api(监控Api)")]),t._v(" "),v("li",[t._v("数据存储层:mysql(监控mysql)，mongodb，redis")]),t._v(" "),v("li",[t._v("监控linux服务器本身的运行状态(有时候服务器配置低，本身扛不住；外部层面图片视频内容加载(比如先加载视频js后加载图片，可能感觉到页面卡顿；所以应该先加载图片，因为视频js是控制某些业务逻辑的))")]),t._v(" "),v("li",[t._v("分块分拆测试，一块一块测试")]),t._v(" "),v("li",[t._v("数据库测试:把研发代码拿过来，把里面跟数据库产生交互的sql语句抽离出来，然后开发成性能测试脚本，对mysql数据库进行性能测试，好处是没有其它因素干扰，如果发现问题，肯定是mysql本身的问题，要么进行sql语句调优、要么进行mysql配置调优、要么进行服务器层面的硬件调优")])]),t._v(" "),v("h2",{attrs:{id:"性能测试指标定义"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#性能测试指标定义"}},[t._v("#")]),t._v(" 性能测试指标定义")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("事务:从客户端发起的一个或多个请求(这些请求组成一个完整的操作),到客户端接收到从服务器返回的响应")])]),t._v(" "),v("li",[v("p",[t._v("TPS(Transaction Per Second):每秒钟系统能够处理的事务数")])]),t._v(" "),v("li",[v("p",[t._v("请求响应时间:从客户端发起的一个请求开始，到客户端接收到从服务器返回的响应。整个过程所耗费的时间")])]),t._v(" "),v("li",[v("p",[t._v("事务响应时间:事务可能是由一个或多个请求组成的，事务响应时间主要是针对于用户角度而言，如转账")])]),t._v(" "),v("li",[v("p",[t._v("并发定义:没有严格意义上的并发。并发总有先后，无论差距是1毫秒或者1微妙，总有一个时间差，所以并发讲的是一个时间范围内，比如1秒内。所以一般说1秒内发起多少个并发")]),t._v(" "),v("p",[t._v("并发举例")]),t._v(" "),v("ul",[v("li",[t._v("多用户在系统上进行同一操作： 比如双十一，大家针对同一商品进行秒杀。--- 同一系统上同一功能操作")]),t._v(" "),v("li",[t._v("多用户在系统上进行不同操作，比如双十一，大家针对不同商品进行秒杀，或者是大家有进行其他不同的操作，比如商品浏览。--- 同一系统上不同功能操作")])])]),t._v(" "),v("li",[v("p",[t._v("并发用户数:同一单位时间内对系统发起请求的用户数量")])]),t._v(" "),v("li",[v("p",[t._v("吞吐量:一次性能测试过程中网络上传输的数据量的总和")])]),t._v(" "),v("li",[v("p",[t._v("吞吐率:单位时间内网络上传输的数据流。吞吐率 = 吞吐量 / 传输时间")])]),t._v(" "),v("li",[v("p",[t._v("点击率:每秒钟用户向服务器提交的请求数。这是Web应用程序特有的一个指标，可以想象为每秒钟用户总共在页面上进行多少次点击操作，但是需要注意的是一次鼠标单击的操作后，客户端有可能向服务器发送了多次请求")])]),t._v(" "),v("li",[v("p",[t._v("资源使用率：对不同的系统资源的使用情况，如cpu，内存，io")])])]),t._v(" "),v("h2",{attrs:{id:"性能测试的需求分析"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#性能测试的需求分析"}},[t._v("#")]),t._v(" 性能测试的需求分析")]),t._v(" "),v("h3",{attrs:{id:"分析的目的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#分析的目的"}},[t._v("#")]),t._v(" 分析的目的")]),t._v(" "),v("ul",[v("li",[t._v("明确测试指标")]),t._v(" "),v("li",[t._v("明确测试场景")])]),t._v(" "),v("h3",{attrs:{id:"新系统"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#新系统"}},[t._v("#")]),t._v(" 新系统")]),t._v(" "),v("ul",[v("li",[t._v("同行业比较")]),t._v(" "),v("li",[t._v("业务预期")])]),t._v(" "),v("h3",{attrs:{id:"老系统"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#老系统"}},[t._v("#")]),t._v(" 老系统")]),t._v(" "),v("ul",[v("li",[t._v("对比以往的用户使用行为以及用户量")])]),t._v(" "),v("h2",{attrs:{id:"性能测试工具"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#性能测试工具"}},[t._v("#")]),t._v(" 性能测试工具")]),t._v(" "),v("p",[t._v("常用工具:")]),t._v(" "),v("ul",[v("li",[t._v("LoadRunner")]),t._v(" "),v("li",[t._v("JMeter")])]),t._v(" "),v("p",[v("strong",[t._v("对比")])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("对比纬度")]),t._v(" "),v("th",[t._v("LoadRunner")]),t._v(" "),v("th",[t._v("JMeter")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("量级")]),t._v(" "),v("td",[t._v("重")]),t._v(" "),v("td",[t._v("轻")])]),t._v(" "),v("tr",[v("td",[t._v("易用性")]),t._v(" "),v("td",[t._v("易")]),t._v(" "),v("td",[t._v("易")])]),t._v(" "),v("tr",[v("td",[t._v("是否开源")]),t._v(" "),v("td",[t._v("否")]),t._v(" "),v("td",[t._v("是")])]),t._v(" "),v("tr",[v("td",[t._v("语言支持")]),t._v(" "),v("td",[t._v("C/java1.5")]),t._v(" "),v("td",[t._v("java")])]),t._v(" "),v("tr",[v("td",[t._v("是否收费")]),t._v(" "),v("td",[t._v("是")]),t._v(" "),v("td",[t._v("否")])])])]),t._v(" "),v("h2",{attrs:{id:"jmeter"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jmeter"}},[t._v("#")]),t._v(" JMeter")]),t._v(" "),v("h3",{attrs:{id:"jmeter安装"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jmeter安装"}},[t._v("#")]),t._v(" JMeter安装")]),t._v(" "),v("p",[t._v("首先去https://jmeter.apache.org/download_jmeter.cgi网站下载安装包")]),t._v(" "),v("p",[v("img",{attrs:{src:"/optimization/1608468203808.jpg",alt:""}})]),t._v(" "),v("p",[t._v("然后需要配置java环境，这里不多写了")]),t._v(" "),v("p",[t._v("cd到apache-jmeter/bin目录下，mac运行jmeter.sh，window运行jmeter.bat")]),t._v(" "),v("p",[v("img",{attrs:{src:"/optimization/1608385080392.jpg",alt:""}})]),t._v(" "),v("h3",{attrs:{id:"jmeter实现多并发"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jmeter实现多并发"}},[t._v("#")]),t._v(" Jmeter实现多并发")]),t._v(" "),v("ul",[v("li",[t._v("线程组:负载发生器，用多线程或多进程的方式来模拟用户的使用行为。JMeter是以线程的方式来进行模拟用户的并发访问的。")])]),t._v(" "),v("h3",{attrs:{id:"jmeter实现逻辑分之控制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jmeter实现逻辑分之控制"}},[t._v("#")]),t._v(" Jmeter实现逻辑分之控制")]),t._v(" "),v("ul",[v("li",[t._v("逻辑控制器:用来控制测试脚本的逻辑判断，也可以理解为如何控制脚本的运行。例如:如果控制器，就是当满足什么样的条件后执行哪一步操作。")])]),t._v(" "),v("h3",{attrs:{id:"jmeter实现配置管理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jmeter实现配置管理"}},[t._v("#")]),t._v(" Jmeter实现配置管理")]),t._v(" "),v("ul",[v("li",[t._v("配置元件:用来提供一些配置相关的信息，如Http请求头，cookie管理，提供参数化数据。还可以进行用户自定义变量等配，用以来定义常量等。")])]),t._v(" "),v("h3",{attrs:{id:"jmeter实现请求预处理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jmeter实现请求预处理"}},[t._v("#")]),t._v(" Jmeter实现请求预处理")]),t._v(" "),v("ul",[v("li",[t._v("前置处理器:用于在实际的请求发出之前对即将发出的请求进行特殊处理。例如，用户参数，可以在实际发送请求之前来定义变量，可以在后边的实际请求中进行使用。")])]),t._v(" "),v("h3",{attrs:{id:"jmeter集合点-定时并发"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jmeter集合点-定时并发"}},[t._v("#")]),t._v(" Jmeter集合点，定时并发")]),t._v(" "),v("ul",[v("li",[t._v('定时器:用于操作与操作之间设置等待时间，等待时间是性能测试中常用的控制客户端QPS的手段。类似LoadRunner里面的"思考时间"。')])]),t._v(" "),v("h3",{attrs:{id:"jmeter实现各种请求的发送"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jmeter实现各种请求的发送"}},[t._v("#")]),t._v(" Jmeter实现各种请求的发送")]),t._v(" "),v("ul",[v("li",[t._v("Sampler:取样器，是性能测试中向服务器发送请求，记录响应信息，记录响应事件的最小单元，JMeter原生支持多种不同的Sampler。")])]),t._v(" "),v("h3",{attrs:{id:"jmeter实现关联"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jmeter实现关联"}},[t._v("#")]),t._v(" Jmeter实现关联")]),t._v(" "),v("ul",[v("li",[t._v("后置处理器:(关联概念的应用器)用于对Sampler发出请求后得到的服务器响应进行处理。一般用来提取响应中的特定数据。")])]),t._v(" "),v("h3",{attrs:{id:"jmeter实现数据预判"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jmeter实现数据预判"}},[t._v("#")]),t._v(" Jmeter实现数据预判")]),t._v(" "),v("ul",[v("li",[t._v("断言:断言用于检查测试中得到的相应数据是否符合预期，断言一般用来设置检查点，用以保证性能测试过程中的数据交互是否预期一致。")])]),t._v(" "),v("h3",{attrs:{id:"函数助手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#函数助手"}},[t._v("#")]),t._v(" 函数助手")]),t._v(" "),v("ul",[v("li",[t._v("随机数(_Random)")]),t._v(" "),v("li",[t._v("参数化助手(_CSVRead)")]),t._v(" "),v("li",[t._v("计数器(_counter)")]),t._v(" "),v("li",[t._v("唯一数(_UUID)")])]),t._v(" "),v("p",[v("img",{attrs:{src:"/optimization/1608472240749.jpg",alt:""}})]),t._v(" "),v("h3",{attrs:{id:"jmeter实现分布式并发"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jmeter实现分布式并发"}},[t._v("#")]),t._v(" Jmeter实现分布式并发")]),t._v(" "),v("ul",[v("li",[t._v("Master在jmeter.properties中添加remote_hosts")]),t._v(" "),v("li",[t._v("Slave在jmeter.properties中添加server_port")]),t._v(" "),v("li",[t._v("Slave启动jmeter-server")])]),t._v(" "),v("h2",{attrs:{id:"服务器性能测试范围"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#服务器性能测试范围"}},[t._v("#")]),t._v(" 服务器性能测试范围")]),t._v(" "),v("p",[t._v("测试目的:发现服务器的性能瓶颈。配置的不同能够承载的最大任务数不同，能够承载的压力也不同")]),t._v(" "),v("p",[t._v("测试范围及性能指标")]),t._v(" "),v("ul",[v("li",[t._v("CPU")]),t._v(" "),v("li",[t._v("内存")]),t._v(" "),v("li",[t._v("网络")]),t._v(" "),v("li",[t._v("版本")]),t._v(" "),v("li",[t._v("磁盘")])]),t._v(" "),v("p",[t._v("测试与生产的环境配置不同？")]),t._v(" "),v("ul",[v("li",[t._v("通过多次压测来计算性能损耗")])]),t._v(" "),v("p",[t._v("性能损耗的计算方式")]),t._v(" "),v("ul",[v("li",[t._v("多次压测后的性能预估")])]),t._v(" "),v("p",[v("img",{attrs:{src:"/optimization/1608473819458.jpg",alt:""}})])])}),[],!1,null,null,null);v.default=r.exports}}]);