(window.webpackJsonp=window.webpackJsonp||[]).push([[116],{419:function(t,s,a){"use strict";a.r(s);var e=a(12),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"fiber"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fiber"}},[t._v("#")]),t._v(" fiber")]),t._v(" "),s("h2",{attrs:{id:"什么是fiber"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是fiber"}},[t._v("#")]),t._v(" 什么是fiber")]),t._v(" "),s("p",[t._v("JavaScript是单线程的，着意味着我们只有一个线程可以执行所有的UI更新，处理用户操作和网络调用等。")]),t._v(" "),s("p",[t._v("在Fiber之前React有两棵树，一颗是当前树，另一颗是带有所有更新的更新树。协调器将在一次通过中同步找到两个树之间的差异，这个过程不能被打断，得全部执行完一把更新，节点过多导致卡顿，这将阻止主线程执行其他重要任务，例如某些用户操作")]),t._v(" "),s("p",[t._v("因此，Facebook团队在React 16更新中引入了Fiber作为其核心架构。")]),t._v(" "),s("p",[t._v("fiber:就是一个数据结构，它有很多属性")]),t._v(" "),s("p",[t._v("虚拟dom是对真实dom得一种简化，一些真实dom都做不到得事情，那虚拟dom更做不到")]),t._v(" "),s("p",[t._v("就有了fiber，有很多得属性，希望借由fiber上得这堆属性，来做到一些比较厉害得事情。")]),t._v(" "),s("h2",{attrs:{id:"fiber架构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fiber架构"}},[t._v("#")]),t._v(" fiber架构")]),t._v(" "),s("p",[t._v("为了弥补一些不足，就设计了一些新的算法，而为了能让这些算法跑起来，所以出现了fiber这种数据结构，fiber这种数据结构+新的算法 = fiber架构")]),t._v(" "),s("h2",{attrs:{id:"react应用管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react应用管理"}},[t._v("#")]),t._v(" react应用管理")]),t._v(" "),s("p",[t._v("react应用从始至终管理着最基本得三样东西:")]),t._v(" "),s("ul",[s("li",[t._v("Root(整个应用得根，一个对象，不是fiber，有个属性指向current树，同样也有个属性指向workInProgress树)")]),t._v(" "),s("li",[t._v("current(树上的每一个节点都是一个fiber，保存着上一次得状态，并且每个fiber都对应着一个jsx节点)")]),t._v(" "),s("li",[t._v("workInProgress(树上的每一个节点都是一个fiber，保存着本次新的状态，并且每个fiber节点都对应一个jsx节点)")])]),t._v(" "),s("h2",{attrs:{id:"初次渲染的时候-没有current树问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初次渲染的时候-没有current树问题"}},[t._v("#")]),t._v(" 初次渲染的时候，没有current树问题")]),t._v(" "),s("p",[t._v("react在一开始创建Root的时候就会同时创建一个uninitialFiber的东西(未初始化的fiber)")]),t._v(" "),s("p",[t._v("让react的curren指向了uninitialFiber，之后再去创建一个本次要用到的workInProgress")]),t._v(" "),s("ul",[s("li",[t._v("ReactDOM.render()和setState的时候开始创建更新。")]),t._v(" "),s("li",[t._v("将创建的更新加入任务队列，等待调度。")]),t._v(" "),s("li",[t._v("在requestldleCallback空闲时执行任务。")]),t._v(" "),s("li",[t._v("从根节点开始遍历Fiber Node，并且构建workInProgress Tree。")]),t._v(" "),s("li",[t._v("生成effectList。")]),t._v(" "),s("li",[t._v("根据EffectList更新DOM。")])]),t._v(" "),s("p",[t._v("workInProgress Tree 构建完毕，得到的就是新的Fiber Tree，然后喜新厌旧(把current指针指向workInProgress Tree,丢掉旧的Fiber Tree)就好了。")]),t._v(" "),s("p",[t._v("这样做的好处:")]),t._v(" "),s("ul",[s("li",[t._v("能够复用内部对象(fiber)")]),t._v(" "),s("li",[t._v("节省内存分配，GC的时间开销")])]),t._v(" "),s("p",[t._v("就算运行中有错误，也不会影响View上的数据")]),t._v(" "),s("p",[t._v("每个fiber上都有一个 "),s("strong",[t._v("alternate")]),t._v(" 属性，也指向一个fiber，创建workInProgress节点时优先取 "),s("strong",[t._v("alternate")]),t._v(" ,没有的话就创建一个。")]),t._v(" "),s("p",[t._v("创建workInProgress Tree的过程也是一个Diff的过程，Diff完成之后会生成一个EffectList，这个EffectList就是最终Commit阶段用来处理副作用的阶段")]),t._v(" "),s("h2",{attrs:{id:"react中主要分两个阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react中主要分两个阶段"}},[t._v("#")]),t._v(" react中主要分两个阶段")]),t._v(" "),s("p",[s("img",{attrs:{src:"/react/write/lifecycle.png",alt:""}})]),t._v(" "),s("ul",[s("li",[t._v("render阶段(指的是创建fiber的过程)\n"),s("ul",[s("li",[t._v("为每个节点创建新的fiber(workInProgress)(可能是复用)生成一个有新状态的workInProgress树")]),t._v(" "),s("li",[t._v("初次渲染的时候(或新创建了某个节点的时候)会将这个fiber创建真实的dom实例，并且对应当前节点的子节点进行插入")]),t._v(" "),s("li",[t._v("如果不是初次渲染的话，就对比新旧fiber状态，将产生了更新的fiber节点，最终通过链表的形式挂载到RootFiber上")])])]),t._v(" "),s("li",[t._v("commit阶段(真正渲染阶段)\n"),s("ul",[s("li",[t._v("执行snapshot生命周期")]),t._v(" "),s("li",[t._v("会从RootFiber上获取到那条链表，根据链表上的标识来操作页面")]),t._v(" "),s("li",[t._v("执行剩余的生命周期")])])])]),t._v(" "),s("p",[t._v("在渲染阶段调用的生命周期方法：")]),t._v(" "),s("ul",[s("li",[t._v("getDerivedStateFromProps")]),t._v(" "),s("li",[t._v("shouldComponentUpdate")]),t._v(" "),s("li",[t._v("render")])]),t._v(" "),s("p",[t._v("不管是初次渲染还是更新 都是从根往下遍历的")]),t._v(" "),s("p",[t._v("在提交阶段调用的生命周期方法：")]),t._v(" "),s("ul",[s("li",[t._v("getSnapshotBeforeUpdate")]),t._v(" "),s("li",[t._v("componentDidMount")]),t._v(" "),s("li",[t._v("componentDidUpdate")]),t._v(" "),s("li",[t._v("componentWillUnmount")])]),t._v(" "),s("p",[t._v("由于这些方法在提交阶段被调用，因此它们可能包含任何副作用和DOM操作操作")]),t._v(" "),s("blockquote",[s("p",[t._v("这里要特别注意的是，阶段1（渲染）可以暂停和恢复，即，它是异步的，而阶段2必须在一个流程中完成（同步）。")])]),t._v(" "),s("h2",{attrs:{id:"prioritization"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#prioritization"}},[t._v("#")]),t._v(" Prioritization")]),t._v(" "),s("p",[t._v("React系统如何确定要暂停/恢复哪个进程？")]),t._v(" "),s("p",[s("strong",[t._v("优先级")]),t._v(" 是React Fiber最重要的功能之一。Fiber Reconciler为任务分配优先级，并根据优先级将更新这些更改。")]),t._v(" "),s("p",[t._v("根据任务，React分配以下优先级:")]),t._v(" "),s("ul",[s("li",[t._v("同步")]),t._v(" "),s("li",[t._v("高优先级")]),t._v(" "),s("li",[t._v("低优先级")]),t._v(" "),s("li",[t._v("场外工作(优先)等")])]),t._v(" "),s("p",[t._v("例如，在所有组件的优先级中，将textInput类型事件指定为高优先级")]),t._v(" "),s("p",[t._v("按照优先级执行，如果插入了新的任务，那么也按照优先级重新排序，分别是 "),s("strong",[t._v("window.requestAnimationFrame")]),t._v(" 和 "),s("strong",[t._v("window.requestIdleCallback")])]),t._v(" "),s("h2",{attrs:{id:"setstate更新是同步还是异步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setstate更新是同步还是异步"}},[t._v("#")]),t._v(" setState更新是同步还是异步？")]),t._v(" "),s("p",[t._v("如果是正常情况下，也就是没有使用Concurrent组件的情况下，是同步更新的，但是，不会立即获取到最新的state的值，因为调用setState只是单纯的将你传进来的新的state放入updateQueue这条链上，等这个点击事件结束之后会触发内部的一个回调函数，在这个回调函数中，才会真正的去更新state已经重新渲染；当使用了Concurrent组件的时候，这种情况下才是真正的异步更新模式，同样的没法立即获取最新状态，并且在执行react的更新和渲染过程中使用了真正的异步方式(postMessage)这个才是真正的异步。当使用了flushSync这个API的时候，react的更新渲染完全是同步的，会立即发出更新state以及渲染的过程，这种情况可以获取到最新的状态")]),t._v(" "),s("h2",{attrs:{id:"setstate后如何马上拿到更新的值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setstate后如何马上拿到更新的值"}},[t._v("#")]),t._v(" setState后如何马上拿到更新的值？")]),t._v(" "),s("h3",{attrs:{id:"flushsync"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#flushsync"}},[t._v("#")]),t._v(" flushSync")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("flushSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"settimeout"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#settimeout"}},[t._v("#")]),t._v(" setTimeout")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"addeventlistener"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#addeventlistener"}},[t._v("#")]),t._v(" addEventListener")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("div"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'click'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);