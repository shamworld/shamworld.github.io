(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{366:function(a,e,p){"use strict";p.r(e);var r=p(12),l=Object(r.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"工程化基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工程化基础"}},[a._v("#")]),a._v(" 工程化基础")]),a._v(" "),e("h2",{attrs:{id:"webpack-与-grunt、gulp-的不同"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webpack-与-grunt、gulp-的不同"}},[a._v("#")]),a._v(" webpack 与 grunt、gulp 的不同？")]),a._v(" "),e("p",[a._v("Grunt、Gulp 是基于任务运⾏的⼯具： 它们会⾃动执⾏指定的任务，\n就像流⽔线，把资源放上去然后通过不同插件进⾏加⼯，它们包含活\n跃的社区，丰富的插件，能⽅便的打造各种⼯作流。")]),a._v(" "),e("p",[a._v("Webpack 是基于模块化打包的⼯具: ⾃动化处理模块，webpack 把⼀\n切当成模块，当 webpack 处理应⽤程序时，它会递归地构建⼀个依\n赖关系图 (dependency graph)，其中包含应⽤程序需要的每个模块，\n然后将所有这些模块打包成⼀个或多个 bundle。")]),a._v(" "),e("p",[a._v("因此这是完全不同的两类⼯具,⽽现在主流的⽅式是⽤ npm script 代\n替 Grunt、Gulp，npm script 同样可以打造任务流。")]),a._v(" "),e("h2",{attrs:{id:"webpack、rollup、parcel-优劣"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webpack、rollup、parcel-优劣"}},[a._v("#")]),a._v(" webpack、rollup、parcel 优劣？")]),a._v(" "),e("p",[a._v("webpack 适⽤于⼤型复杂的前端站点构建: webpack 有强⼤的 loader\n和插件⽣态,打包后的⽂件实际上就是⼀个⽴即执⾏函数，这个⽴即\n执⾏函数接收⼀个参数，这个参数是模块对象，键为各个模块的路径，\n值为模块内容。⽴即执⾏函数内部则处理模块之间的引⽤，执⾏模块\n等,这种情况更适合⽂件依赖复杂的应⽤开发。")]),a._v(" "),e("p",[a._v("rollup 适⽤于基础库的打包，如 vue、d3 等: Rollup 就是将各个模\n块打包进⼀个⽂件中，并且通过 Tree-shaking 来删除⽆⽤的代码, 可以最⼤程度上降低代码体积,但是 rollup 没有 webpack 如此多的如代码分割、按需加载等⾼级功能，其更聚焦于库的打包，因此更适合库的开发。")]),a._v(" "),e("p",[a._v("parcel 适⽤于简单的实验性项⽬: 他可以满⾜低⻔槛的快速看到效\n果,但是⽣态差、报错信息不够全⾯都是他的硬伤，除了⼀些玩具项\n⽬或者实验项⽬不建议使⽤。")]),a._v(" "),e("h2",{attrs:{id:"有哪些常⻅的-loader"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#有哪些常⻅的-loader"}},[a._v("#")]),a._v(" 有哪些常⻅的 Loader？")]),a._v(" "),e("p",[a._v("file-loader：把⽂件输出到⼀个⽂件夹中，在代码中通过相对 URL\n去引⽤输出的⽂件")]),a._v(" "),e("p",[a._v("url-loader：和 file-loader 类似，但是能在⽂件很⼩的情况下以\nbase64 的⽅式把⽂件内容注⼊到代码中去")]),a._v(" "),e("p",[a._v("source-map-loader：加载额外的 Source Map ⽂件，以⽅便断点调试")]),a._v(" "),e("p",[a._v("image-loader：加载并且压缩图⽚⽂件")]),a._v(" "),e("p",[a._v("babel-loader：把 ES6 转换成 ES5")]),a._v(" "),e("p",[a._v("css-loader：加载 CSS，⽀持模块化、压缩、⽂件导⼊等特性")]),a._v(" "),e("p",[a._v("style-loader：把 CSS 代码注⼊到 JavaScript 中，通过 DOM 操作去加载 CSS。")]),a._v(" "),e("p",[a._v("eslint-loader：通过 ESLint 检查 JavaScript 代码")]),a._v(" "),e("p",[a._v("注意：在 Webpack 中，loader 的执行顺序是从右向左执行的。因为\nwebpack 选择了 compose 这样的函数式编程方式，这种方式的表达式\n执行是从右向左的。")]),a._v(" "),e("h2",{attrs:{id:"有哪些常⻅的-plugin"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#有哪些常⻅的-plugin"}},[a._v("#")]),a._v(" 有哪些常⻅的 Plugin？")]),a._v(" "),e("p",[a._v("define-plugin：定义环境变量")]),a._v(" "),e("p",[a._v("html-webpack-plugin：简化 html ⽂件创建")]),a._v(" "),e("p",[a._v("uglifyjs-webpack-plugin：通过 UglifyES 压缩 ES6 代码")]),a._v(" "),e("p",[a._v("webpack-parallel-uglify-plugin: 多核压缩，提⾼压缩速度")]),a._v(" "),e("p",[a._v("webpack-bundle-analyzer: 可视化 webpack 输出⽂件的体积")]),a._v(" "),e("p",[a._v("mini-css-extract-plugin: CSS 提取到单独的⽂件中，⽀持按需加载")]),a._v(" "),e("h2",{attrs:{id:"bundle-chunk-module-是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bundle-chunk-module-是什么"}},[a._v("#")]),a._v(" bundle，chunk，module 是什么？")]),a._v(" "),e("p",[a._v("bundle：是由 webpack 打包出来的⽂件；")]),a._v(" "),e("p",[a._v("chunk：代码块，⼀个 chunk 由多个模块组合⽽成，⽤于代码的合并和分割；")]),a._v(" "),e("p",[a._v("module：是开发中的单个模块，在 webpack 的世界，⼀切皆模块，⼀\n个模块对应⼀个⽂件，webpack 会从配置的 entry 中递归开始找出所\n有依赖的模块。")]),a._v(" "),e("h2",{attrs:{id:"loader-和-plugin-的不同"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#loader-和-plugin-的不同"}},[a._v("#")]),a._v(" Loader 和 Plugin 的不同？")]),a._v(" "),e("p",[a._v("不同的作⽤:")]),a._v(" "),e("p",[a._v('Loader 直译为"加载器"。Webpack 将⼀切⽂件视为模块，但是 webpack\n原⽣是只能解析 js ⽂件，如果想将其他⽂件也打包的话，就会⽤到\nloader 。 所以 Loader 的作⽤是让 webpack 拥有了加载和解析⾮\nJavaScript ⽂件的能⼒。')]),a._v(" "),e("p",[a._v('Plugin 直译为"插件"。Plugin 可以扩展 webpack 的功能，让 webpack\n具有更多的灵活性。在 Webpack 运⾏的⽣命周期中会⼴播出许多事\n件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的\nAPI 改变输出结果。')]),a._v(" "),e("p",[a._v("不同的⽤法:")]),a._v(" "),e("p",[a._v("Loader 在 module.rules 中配置，也就是说他作为模块的解析规则\n⽽存在。 类型为数组，每⼀项都是⼀个 Object ，⾥⾯描述了对于\n什么类型的⽂件（ test ），使⽤什么加载( loader )和使⽤的参数（ options ）")]),a._v(" "),e("p",[a._v("Plugin 在 plugins 中单独配置。类型为数组，每⼀项是⼀个 plugin\n的实例，参数都通过构造函数传⼊。")]),a._v(" "),e("h2",{attrs:{id:"babel-的原理是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#babel-的原理是什么"}},[a._v("#")]),a._v(" Babel 的原理是什么?")]),a._v(" "),e("p",[a._v("babel 的转译过程也分为三个阶段，这三步具体是：")]),a._v(" "),e("p",[a._v("解析 Parse: 将代码解析⽣成抽象语法树（AST），即词法分析与语法分析的过程；")]),a._v(" "),e("p",[a._v("转换 Transform: 对于 AST 进⾏变换⼀系列的操作，babel 接受得\n到 AST 并通过 babel-traverse 对其进⾏遍历，在此过程中进⾏添\n加、更新及移除等操作；")]),a._v(" "),e("p",[a._v("⽣成 Generate: 将变换后的 AST 再转换为 JS 代码, 使⽤到的模\n块是 babel-generator。")])])}),[],!1,null,null,null);e.default=l.exports}}]);